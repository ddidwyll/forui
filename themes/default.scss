@function c($h, $s, $l, $o: 1) {
  @return hsla($h, $s, $l, $o);
}

@function cp($s, $l, $o: 1) {
  @return c(var(--hp), $s, $l, $o);
}

@function cs($s, $l, $o: 1) {
  @return c(var(--hs), $s, $l, $o);
}

@function ct($s, $l, $o: 1) {
  @return c(var(--ht), $s, $l, $o);
}

@function v($elem, $prop: null, $variant: null, $state: null) {
  @if ($prop == null) {
    @return var(--#{$elem});
  }
  @elseif ($variant == null) {
    @return var(--#{$elem}-#{$prop});
  }
  @elseif ($state == null) {
    @return var(--#{$elem}-#{$prop}-#{$variant});
  } @else {
    @return var(--#{$elem}-#{$prop}-#{$variant}-#{$state});
  }
}

@mixin v($prop, $elem, $variant: null, $state: null) {
  #{$prop}: #{v($elem, $prop, $variant, $state)};
}

$elements: (
  primary: 180,
  hp: var(--primary),
  secondary: -50,
  hs: calc(var(--hp) + var(--secondary)),
  tertiary: 200,
  ht: calc(var(--hp) + var(--tertiary)),
  common: (
    color: (
      base: cp(20%, 40%),
      light: cp(10%, 55%),
      white: #fff
    ),
    font-size: (
      base: 1rem,
      small: 0.7rem
    ),
    font-weight: (
      base: 400,
      bold: 500
    ),
    line-height: (
      base: 1.5
    ),
    background-color: (
      light: cp(18%, 97%),
      lighten: cp(10%, 98.5%),
      white: cp(0%, 99.5%),
      dark: cp(15%, 43%),
      tertiary: ct(50%, 96.5%),
      secondary: cs(60%, 95.5%)
    ),
    background-image: url('/noise.png'),
    font-family:
      "Roboto, -apple-system, BlinkMacSystemFont,
      'Segoe UI', Oxygen-Sans, Ubuntu, Cantarell,
      'Helvetica Neue', sans-serif",
    margin: (
      base: 4vmin,
      large: 6vmin,
      small: 3vmin
    ),
    padding: (
      base: 4vmin,
      large: 6vmin,
      small: 3vmin
    ),
    border: (
      width: (
        base: 1px
      ),
      base: v(common, border, width, base) solid
    ),
    border-color: (
      base: cp(10%, 88%),
      dark: cp(10%, 80%)
    ),
    shadow: (
      large: 0 0 1rem 0,
      inset: inset 0 0 3px 0,
      inverse: inset 0 0 8px 0px,
      small: 0 0 2px 0,
      color: (
        base: cp(10%, 88%),
        dark: cp(10%, 27%)
      )
    ),
    transition: (
      base: all 0.48s ease-out
    )
  ),
  scrollbar: (
    background: (
      base: cp(10%, 77%),
      hover: cp(10%, 55%)
    ),
    size: 5px,
    radius: 2px
  ),
  container: (
    width: (
      base: 90%,
      small: 100%
    ),
    max-width: 1200px,
    padding: (
      x: v(common, padding, small),
      y: v(common, padding, base)
    ),
    border: 0,
    shadow: v(common, shadow, large) v(common, shadow, color, base)
  ),
  header: (
    width: (
      base: 100%
    ),
    height: (
      base: 65px
    )
  ),
  h: (
    font-size: (
      h1: 1.5rem
    ),
    font-weight: (
      base: v(common, font-weight, base)
    ),
    line-height: (
      base: v(common, line-height, base)
    )
  ),
  control: (
    height: (
      base: 39px,
      small: 29px,
      large: 50px
    ),
    padding: (
      base: 0 0.77rem,
      small: 0 0.3rem,
      large: 0 1.1rem
    ),
    line-height: (
      base: calc(var(--control-height-base) - var(--common-border-width-base) * 2),
      small: calc(var(--control-height-small) - var(--common-border-width-base) * 2),
      large: calc(var(--control-height-large) - var(--common-border-width-base) * 2)
    ),
    border: v(common, border, base),
    border-color: (
      primary: v(common, border-color, base),
      secondary: cs(70%, 75%),
      tertiary: ct(80%, 81%)
    ),
    border-radius: 2px
  ),
  button: (
    color: (
      primary: (
        base: v(common, color, base),
        light: v(common, color, light)
      )
    ),
    font-size: (
      base: v(common, font-size, small)
    ),
    font-weight: (
      base: v(common, font-weight, bold)
    ),
    height: (
      base: v(control, height, base),
      small: v(control, height, small),
      large: v(control, height, large)
    ),
    line-height: (
      base: v(control, line-height, base),
      small: v(control, line-height, small),
      large: v(control, line-height, large)
    ),
    text-transform: uppercase,
    letter-spacing: 1px,
    background-color: (
      primary: (
        base: v(common, background-color, lighten),
        inverse: v(common, background-color, dark)
      ),
      secondary: (
        base: v(common, background-color, secondary),
        inverse: cs(40%, 55%)
      ),
      tertiary: (
        base: v(common, background-color, tertiary),
        inverse: ct(40%, 60%)
      )
    ),
    border: v(control, border),
    border-color: (
      primary: v(control, border-color, primary),
      tertiary: v(control, border-color, tertiary),
      secondary: v(control, border-color, secondary)
    ),
    border-radius: v(control, border-radius),
    shadow: (
      base: v(common, shadow, small),
      inset: v(common, shadow, inset),
      inverse: v(common, shadow, inverse)
    ),
    shadow-color: (
      primary: (
        base: v(common, shadow, color, base),
        dark: v(common, shadow, color, dark)
      )
    )
  ),
  input: (
    font-size: v(common, font-size, base),
    height: (
      base: v(control, height, base),
      small: v(control, height, small),
      large: v(control, height, large)
    ),
    line-height: (
      base: v(control, line-height, base),
      small: v(control, line-height, small),
      large: v(control, line-height, large)
    ),
    min-width: 230px,
    background-color: (
      focus: v(common, background-color, white),
      base: cp(15%, 99%)
    ),
    border: v(control, border),
    border-color: (
      primary: v(control, border-color, primary),
      tertiary: v(control, border-color, tertiary),
      secondary: v(control, border-color, secondary),
      dark: v(common, border-color, dark)
    ),
    border-radius: v(control, border-radius),
    shadow: v(common, shadow, inset) v(common, shadow, color, base)
  )
);

:root {
  @each $elem, $props in $elements {
    @if type-of($props) == 'map' {
      @each $prop, $value in $props {
        @if type-of($value) == 'map' {
          @each $var, $val in $value {
            @if type-of($val) == 'map' {
              @each $st, $v in $val {
                --#{$elem}-#{$prop}-#{$var}-#{$st}: #{$v};
              }
            } @else {
              --#{$elem}-#{$prop}-#{$var}: #{$val};
            }
          }
        } @else {
          --#{$elem}-#{$prop}: #{$value};
        }
      }
    } @else {
      --#{$elem}: #{$props};
    }
  }
}

//:root {
//  /* saturation full grayscale */
//  --sfg: 0%;
//  /* saturation grayscale */
//  --sg: 10%;
//  /* saturation semi grayscale */
//  --ssg: 20%;
//  /* saturation semi colore */
//  --ssc: 40%;
//  /* saturation colore */
//  --sc: 80%;
//  /* saturation full colore */
//  --sfc: 80%;
//
//  /* lightness full dark */
//  --lfd: 5%;
//  /* lightness dark */
//  --ld: 25%;
//  /* lightness semi dark */
//  --lsd: 37%;
//  /* lightness middle */
//  --lm: 80%;
//  /* lightness semi light */
//  --lsl: 86%;
//  /* lightness light */
//  --ll: 97%;
//  /* lightness full light */
//  --lfl: 99.5%;
//
//  /* alpha opaque */
//  --ao: 1;
//  /* alpha semi opaque */
//  --aso: 0.89;
//  /* alpha semi transparent */
//  --ast: 0.45;
//  /* alpha transparent */
//  --at: 0;
//
//  /* colors */
//  --primary-txt: hsl(var(--hp), 10%, 37%);
//  --secondary-txt: hsl(var(--hs), 10%, 37%);
//  --white-txt: hsl(0, 0%, 99.5);
//  --button-txt: hsl(var(--hp), 20%, 37%);
//  --light-bg: hsl(var(--hp), 20%, 97%);
//  --dark-bg: hsla(var(--hp), 10%, 37%, 0.6);
//  --trans-bg: hsla(var(--hp), 20%, 97%, 0.8);
//  --white-bg: hsl(0, 0%, 99.5);
//  --button-bg: hsl(var(--hp), 20%, 99.5);
//  --button-bg-inverse: hsl(var(--hp), 10%, 37%);
//  --button-bg-inverse-success: hsl(var(--hs), 80%, 37%);
//  --button-bg-inverse-danger: hsl(var(--ht), 80%, 37%);
//  --button-bg-success: hsl(var(--hs), 80%, 86%);
//  --button-bg-danger: hsl(var(--ht), 80%, 86%);
//  --border-color: hsl(var(--hp), 10%, 86%);
//  --border-dark-color: hsl(var(--hp), 0%, 80%);
//  --shadow-color: hsl(var(--hp), 10%, 86%);
//  --shadow-trans-color: hsla(var(--hp), 0%, 25%, 0.1);
//
//  /* text sizes */
//  --font-size: 100%;
//  --line-height: 1.5;
//  --h1-size: 1.55rem;
//  --h1-line-size: 2;
//  --button-font-size: 0.64rem;
//
//  /* font weights */
//  --font-weight: 400;
//  --font-weight-heading: 400;
//  --font-weight-bolder: 500;
//
//  /* shadows */
//  --shadow-small: 0 0 3px 0 var(--shadow-color);
//  --shadow-large: 0 0 11px 1px var(--shadow-color);
//  --button-shadow: var(--shadow-small);
//
//  /* borders */
//  --default-border: 0 none;
//  --button-border: 1px solid var(--border-color);
//
//  /* radiuses */
//  --radius-xsmall: 4px;
//  --button-border-radius: var(--radius-xsmall);
//
//  /* margins */
//  --margin-xsmall: 0.6rem;
//  --margin-small: 1rem;
//  --margin-container: 2vw;
//  --margin-container-large: 3vw;
//
//  /* paddings */
//  --padding-xsmall: 0.6rem;
//  --padding-small: 1rem;
//  --padding-container: 2vw;
//  --padding-container-large: 3vw;
//
//  /* transitions */
//  --transition: all 0.12s ease-out;
//
//  /* container */
//  --container-width: 90%;
//  --container-max-width: 1200px;
//
//  /* header */
//  --header-width: 100%;
//  --header-height: 65px;
//
//  /* button */
//  --button-case: uppercase;
//  --button-height: 2.4rem;
//
//  /* input */
//  --input-font-size: 0.82rem;
//}*/
