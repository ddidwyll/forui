:root {
 /* hue primary */
 --hp: 180;
 /* hue secondary */
 --hs: calc(var(--hp) - 50);
 /* hue tertiary */
 --ht: calc(var(--hp) + 200);
}

@function c($h, $s, $l, $o: 1) {
  @return hsla($h, $s, $l, $o);
}

@function cp($s, $l, $o: 1) {
  @return c(v(hp), $s, $l, $o);
}

@function cs($s, $l, $o: 1) {
  @return c(v(hs), $s, $l, $o);
}

@function ct($s, $l, $o: 1) {
  @return c(v(ht), $s, $l, $o);
}

$colors: (
  text: cp(20%, 30%),
  background: #333,
  primary: (
    base: #FFBB00,
    light: lighten(#FFBB00, 15%),
    dark: darken(#FFBB00, 15%)
  ),
  secondary: (
    base: #0969A2,
    light: lighten(#0969A2, 15%),
    dark: darken(#0969A2, 15%)
  )
);

// size variable map in Sass
$sizes: (
  gutter: 30px,
  spacer: 15px,
  container: (sm: 750px, md: 970px, lg: 1170px ),
  viewport:  (sm: 768px, md: 992px, lg: 1200px )
);

// variable prefixes for CSS4 output
$color-prefix: --color-;
$size-prefix: --size-;

@function color($color-name, $color-variant:null) {
  
  // color variant is optional
  @if ($color-variant != null) {
    // map inception, need two names
    @return var(#{$color-prefix}#{$color-name}-#{$color-variant});

  } @else {
    // single-level color, one name
    @return var(#{$color-prefix}#{$color-name});

  }
}

// retrieve size from map with Sass ie. `size(viewport, sm)`
@function size($size-name, $size-variant:null, $true-val:false) {
  
  // size variant is optional
  @if ($size-variant != null) {
    // map inception, need two names
    @return var(#{$size-prefix}#{$size-name}-#{$size-variant});

  } @else {
    // single-level size, one name
    @return var(#{$size-prefix}#{$size-name});

  }
}

// define local variable
@mixin var($name,$value) {
  #{--$name}: $value;
}
// access any variable
@function v($name) {
  @return var(--#{$name});
}

/* ripped CSS4 vars out of color map */
:root {
  
  // each item in color map
  @each $name, $color in $colors {
    
    // maps require a second loop
    @if type-of($color) == "map" {
      
      // each item in sub map
      @each $subname, $subcolor in $color {  
        // --color-primary-base
        #{$color-prefix}#{$name}-#{$subname}: $subcolor;
      }
    
    // normal colors
    } @elseif type-of($color) == "color" {
      
      // --color-background
      #{$color-prefix}#{$name}: $color;
      
    }
  }

  // each item in size map
  @each $name, $size in $sizes {
    
    // maps require a second loop
    @if type-of($size) == "map" {
      
      // each item in sub map
      @each $subname, $subsize in $size {  
        // --size-viewport-md
        #{$size-prefix}#{$name}-#{$subname}: $subsize;
      }
    
    // normal sizes
    } @elseif type-of($size) == "number" {
      
      // --size-background
      #{$size-prefix}#{$name}: $size;
      
    }
  }
}

/* 
 * referencing our color variables with CSS 
body {
  // right here it's Sass tho
  color: color(primary, base);
  background-color: color(background);
  @include var(
    new-primary, 
    darken(
      color(primary,base,true), 
      5%
    )
  );
  color: v(new-primary);
}
 */


/* 
 * referencing a top-level size variable with CSS via Sass @function 
 */
.container { margin: size(spacer) auto; }


/* 
 * referencing our nested size variables with CSS via Sass @each loop 
 */
@each $name, $size in map-get($sizes,viewport) {
  @media (min-width: size(viewport, $name)) {
    /* viewport min-width: #{size(viewport, $name, true)} */
    .container { 
      /* container width: #{size(container, $name, true)} */
      width: size(container, $name); 
    }
  }
}

/*:root {
//  /* hue primary */
//  --hp: 180;
//  /* hue secondary */
//  --hs: calc(var(--hp) - 50);
//  /* hue tertiary */
//  --ht: calc(var(--hp) + 200);
//
//  /* saturation full grayscale */
//  --sfg: 0%;
//  /* saturation grayscale */
//  --sg: 10%;
//  /* saturation semi grayscale */
//  --ssg: 20%;
//  /* saturation semi colore */
//  --ssc: 40%;
//  /* saturation colore */
//  --sc: 80%;
//  /* saturation full colore */
//  --sfc: 80%;
//
//  /* lightness full dark */
//  --lfd: 5%;
//  /* lightness dark */
//  --ld: 25%;
//  /* lightness semi dark */
//  --lsd: 37%;
//  /* lightness middle */
//  --lm: 80%;
//  /* lightness semi light */
//  --lsl: 86%;
//  /* lightness light */
//  --ll: 97%;
//  /* lightness full light */
//  --lfl: 99.5%;
//
//  /* alpha opaque */
//  --ao: 1;
//  /* alpha semi opaque */
//  --aso: 0.89;
//  /* alpha semi transparent */
//  --ast: 0.45;
//  /* alpha transparent */
//  --at: 0;
//
//  /* colors */
//  --primary-txt: hsl(var(--hp), var(--sg), var(--lsd));
//  --secondary-txt: hsl(var(--hs), var(--sg), var(--lsd));
//  --white-txt: hsl(0, 0%, var(--lfl));
//  --button-txt: hsl(var(--hp), var(--ssg), var(--lsd));
//  --light-bg: hsl(var(--hp), var(--ssg), var(--ll));
//  --dark-bg: hsla(var(--hp), var(--sg), var(--lsd), 0.6);
//  --trans-bg: hsla(var(--hp), var(--ssg), var(--ll), 0.8);
//  --white-bg: hsl(0, 0%, var(--lfl));
//  --button-bg: hsl(var(--hp), var(--ssg), var(--lfl));
//  --button-bg-inverse: hsl(var(--hp), var(--sg), var(--lsd));
//  --button-bg-inverse-success: hsl(var(--hs), var(--sc), var(--lsd));
//  --button-bg-inverse-danger: hsl(var(--ht), var(--sc), var(--lsd));
//  --button-bg-success: hsl(var(--hs), var(--sc), var(--lsl));
//  --button-bg-danger: hsl(var(--ht), var(--sc), var(--lsl));
//  --border-color: hsl(var(--hp), var(--sg), var(--lsl));
//  --border-dark-color: hsl(var(--hp), var(--sfg), var(--lm));
//  --shadow-color: hsl(var(--hp), var(--sg), var(--lsl));
//  --shadow-trans-color: hsla(var(--hp), var(--sfg), var(--ld), 0.1);
//
//  /* text sizes */
//  --font-size: 100%;
//  --line-height: 1.5;
//  --h1-size: 1.55rem;
//  --h1-line-size: 2;
//  --button-font-size: 0.64rem;
//
//  /* font weights */
//  --font-weight: 400;
//  --font-weight-heading: 400;
//  --font-weight-bolder: 500;
//
//  /* shadows */
//  --shadow-small: 0 0 3px 0 var(--shadow-color);
//  --shadow-large: 0 0 11px 1px var(--shadow-color);
//  --button-shadow: var(--shadow-small);
//
//  /* borders */
//  --default-border: 0 none;
//  --button-border: 1px solid var(--border-color);
//
//  /* radiuses */
//  --radius-xsmall: 4px;
//  --button-border-radius: var(--radius-xsmall);
//
//  /* margins */
//  --margin-xsmall: 0.6rem;
//  --margin-small: 1rem;
//  --margin-container: 2vw;
//  --margin-container-large: 3vw;
//
//  /* paddings */
//  --padding-xsmall: 0.6rem;
//  --padding-small: 1rem;
//  --padding-container: 2vw;
//  --padding-container-large: 3vw;
//
//  /* transitions */
//  --transition: all 0.12s ease-out;
//
//  /* container */
//  --container-width: 90%;
//  --container-max-width: 1200px;
//
//  /* header */
//  --header-width: 100%;
//  --header-height: 65px;
//
//  /* button */
//  --button-case: uppercase;
//  --button-height: 2.4rem;
//
//  /* input */
//  --input-font-size: 0.82rem;
//}*/
